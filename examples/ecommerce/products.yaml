name: Products
type: object
key: _id
data:
  min: 100
  max: 500
properties:
  _id:
    type: string
    description: The document id
    data:
      transform: "return 'product_' + current_document.product_id;"
  doc_type:
    type: string
    description: The document type
    data:
      value: "product"
  product_id:
    type: string
    description: Unique identifier representing a specific product
    data:
        # this had to be done because faker.fake("{{random.uuid}}") errors
        build: "return faker.random.uuid();"
  price:
    type: double
    description: The product price
    data:
        build: "return parseFloat(faker.commerce.price()) + '.' + faker.random.number({min: 0, max: 99});"
  sale_price:
    type: double
    description: The product price
    data:
        build: "return parseFloat(faker.commerce.price()) + '.' + faker.random.number({min: 0, max: 99});"
        transform: "return current_value > current_document.price ? 0 : current_value;"
  display_name:
    type: string
    description: Display name of product.
    data:
        fake: "{{commerce.productName}}"
  short_description:
    type: string
    description: Description of product.
    data:
        fake: "{{lorem.paragraphs(1)}}"
  long_description:
    type: string
    description: Description of product.
    data:
        fake: "{{lorem.paragraphs(5)}}"
  keywords:
    type: array
    description: An array of keywords
    data:
      build: >
        var keywords = [];
        for (var i = 0, rand = Math.floor(Math.random() * 10) + 1; i < rand; i++) {
          keywords.push(faker.random.word());
        }
        return keywords;
  availability:
    type: string
    description: The availability status of the product
    data:
        build: "return faker.random.arrayElement(['Preorder', 'In-Stock', 'Out of Stock', 'Discontinued']);"
  availability_date:
    type: integer
    description: An epoch time of when the document was last modified
    data:
      fake: "{{date.recent}}"
      transform: "return new Date(current_value).getTime();"
  product_slug:
    type: string
    description: The URL friendly version of the product name
    data:
        transform: "return faker.helpers.slugify(current_document.display_name).toLowerCase();"
  category:
    type: string
    description: Category for the Product
    data:
        fake: "{{commerce.department}}"
  category_slug:
    type: string
    description: The URL friendly version of the category name
    data:
        transform: "return faker.helpers.slugify(current_document.category).toLowerCase();"
  image:
    type: string
    description: Image URL representing the product.
    data:
      fake: "{{image.image}}"
  alternate_images:
    type: array
    description: An array of alternate images for the product
    data:
      build: >
        var images = [];
        for (var i = 0, rand = Math.floor(Math.random() * 4) + 1; i < rand; i++) {
          images.push(faker.image.image());
        }
        return images;
  created_on:
      type: integer
      description: An epoch time of when the document was first created
      data:
        fake: "{{date.past}}"
        transform: "return new Date(current_value).getTime();"
  modified_on:
      type: integer
      description: An epoch time of when the document was last modified
      data:
        fake: "{{date.recent}}"
        transform: "return new Date(current_value).getTime();"
